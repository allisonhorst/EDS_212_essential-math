{
  "articles": [
    {
      "path": "blog.html",
      "title": "Blog",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2022-08-03T09:47:55-07:00"
    },
    {
      "path": "code_basic_comp.html",
      "title": "Basic computation",
      "author": [],
      "contents": "\nBasic computation\nSometimes we use R as a basic calculator. Perform operations using\nexpected symbols:\n*: multiplication\n/: division\n+/-: addition/subtraction\n^: raise to this power\nsqrt(x): take the square root of \\(x\\)\nlog(x): take the natural log of \\(x\\)\nexp(x): natural exponential base (i.e. \\(e^x\\))\n<-: assignment operator (to store outcomes,\ne.g. cost <- price*units)\nExample 1:\nCalculations with stored objects\nThe raw price of a wine glass is $10.00. A winery is buying 350\nglasses, which earns them a 15% discount for a bulk order. If there is\nan 8% sales tax on the discounted price, and a flat shipping rate of\n$48.50, what is the total price the winery will pay?\n\n\n# Create and store the variable values: \n\ncost_per_unit <- 10 # Cost per unit in dollars\nunits <- 350 # Total number of units ordered\ndiscount <- 0.15 # 15% discount for buying > 300 units\ntax_rate <-  0.08 # 8% sales tax \nshipping_cost <- 48.50 # Flat rate for domestic orders\n\n\n\nCritical thinking: Why in some scenarios is it good\npractice to store values as objects, instead of type the value directly\ninto an equation?\nOK, now that all of the values are assigned, let’s find the\ndiscounted bulk price (there are a lot of different ways to calculate\nthis):\n\n\ndiscounted_price <- (1 - discount) * cost_per_unit * units\n\n\n\nThen find the total tax on that discounted price:\n\n\norder_tax <- tax_rate*discounted_price\n\n\n\nNow we have everything we need to find the total price!\n\n\ntotal_price <- discounted_price + order_tax + shipping_cost\n\ntotal_price # Returns the total price\n\n\n[1] 3261.5\n\nExample 2: Exponents\nA model for jaguar shark mass (\\(M\\), kg) of the elusive jaguar shark is\ngiven by the following from Team Zissou, where \\(L\\) is the shark length in meters:\n\\[M=0.4L^{2.6}\\]\nUsing the model, what is the expected mass of jaguar sharks that is\n4.8 meters long? (…yeah function examples below to make this more\nbroadly useful & efficient, but here we’ll just plug in the\nvalue.)\n\n\n# Store the shark length:\nshark_length <- 4.8\n\n# Calculate the shark mass using the model:\nshark_mass <- 0.4 * (shark_length ^ 2.6)\n\n# Return the expected shark mass\nshark_mass\n\n\n[1] 23.6204\n\nExample 3: Evaluate a\nfunction\nGiven the restricted function: \\[P(t, S,\n\\rho) = 0.4t\\sqrt{4S+8.1}-e^{0.03t}+\\ln{(6.2\\rho - 3.9)}\\]\nWhat is \\(P(3.1, 2.5, 6.4)\\)?\nNote: couldn’t you just write a function here, then plug in\nwhatever you want for \\(t\\), \\(S\\), and \\(\\rho\\)? Yes! You’ll be writing a lot of\nfunctions in EDS 221 and beyond, but here’s an example of this\ncalculation done without a function.\nLet’s start by assigning the variable values:\n\n\nt_val <- 3.1\ns_val <- 2.5\nrho_val <- 6.4\n\n\n\nQuestion: Why might I have decided to use these\nobject names, instead of something like \\(t\\) and \\(s\\)?\nThen write the equation to calculate \\(P\\):\n\n\np_val <- 0.4 * t_val * sqrt(4 * s_val + 8.1) - exp(0.3 * t_val) + log(6.2 * rho_val - 3.9)\n\n# Return the calculated value:\np_val\n\n\n[1] 6.318348\n\nQuestion: How is this function restricted? What\nhappens if the \\(S\\) value is updated\nto -10? If the \\(\\rho\\) value is 0.1?\nWhat are the possible domains for \\(S\\) and \\(\\rho\\)?\n\n\n\n",
      "last_modified": "2022-08-03T09:47:56-07:00"
    },
    {
      "path": "code_boolean_operations.html",
      "title": "Boolean operations",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2022-08-03T09:47:56-07:00"
    },
    {
      "path": "code_derivative.html",
      "title": "Find and evaluate a derivative",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2022-08-03T09:47:56-07:00"
    },
    {
      "path": "code_examples.html",
      "title": "Code examples",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2022-08-03T09:47:57-07:00"
    },
    {
      "path": "code_of_conduct.html",
      "title": "Code of Conduct",
      "author": [],
      "contents": "\nAll enrolled students, auditors, and course visitors are expected to\ncomply with the following code of conduct. We expect cooperation from\nall members to help ensure a safe and welcoming environment for\neverybody.\nOverview\nWe are determined to make our courses welcoming, inclusive and\nharassment-free for everyone regardless of gender, gender identity and\nexpression, race, age, sexual orientation, disability, physical\nappearance, body size, or religion (or lack thereof). We do not tolerate\nharassment of class participants, teaching assistants, or instructors in\nany form. Derogatory, abusive, demeaning or sexual language and imagery\nis not appropriate or acceptable. Saying something “as a joke” does not\nmake it less offensive, harmful, or consequential.\nAnything not covered here but that exists in the UCSB\nStudent Conduct Code also applies, and will be enforced by UCSB\nPolicy.\nThese expectations and consequences apply to synchronous discussions,\noffice hours, the course Slack workspace, and all other modes of\ncommunication, posting or discussion by course participants.\nExamples\nof behavior that contributes to creating a positive environment\ninclude:\nUsing welcoming and inclusive language\nBeing an aware and respectful colleague (raise your hand when asked,\nrespect others’ time and space, include peers in small discussions,\ndon’t dominate meetings, etc.)\nGiving proper credit to the creator (of an\nidea/material/solution/etc.)\nBeing respectful of differing viewpoints and experiences\nShowing empathy towards all community members\nUnderstanding that an individual’s experience and worldview are\ninfluenced by multiple (and often compounding) facets of their identity,\nand that your perception of a situation/topic/reaction may be very\ndifferent from your classmates’\nExamples\nof unacceptable behavior by class participants include:\nDistracting other students in classes in labs, or otherwise\ndistracting from their education\nAny abuse, disrespect or harassment of teaching assistants, other\nstudents, or teachers, is not tolerated and will result in disciplinary\naction as needed\nThe use of unwelcome sexual attention or advances\nTrolling, insulting/derogatory comments or language, and personal or\npolitical attacks\nPublic or private harassment\nPublishing others’ private information, such as a physical or\nelectronic address, without explicit permission\nOther conduct which could reasonably be considered inappropriate in\na professional setting\nMembers asked to stop any harassing behavior are expected to comply\nimmediately. If you are being harassed, notice that someone else is\nbeing harassed, or have any other concerns in or related to these\nclasses, you are welcome to contact Allison or use outside\nresources.\nOther resources at UCSB\nAt Campus Advocacy, Resources and Education (CARE) you can chat with\na UCSB staff member in a confidential setting. CARE assists faculty,\nstaff and students who have been impacted by sexual harassment, sexual\nassault, domestic/dating violence, and stalking. The office is\nconfidential so you can talk with a staff member in private without any\nreporting obligations.\nPhone: (805) 893-4613.\nOffice is located in the Student Resource Building (SRB) near\nparking lot 23.\nAnother confidential resource is the Campus Ombuds office. The Ombuds\noffice is particularly helpful if you would like to describe a sensitive\nissue in a confidential setting and learn more about campus resources to\naddress the issue. The Ombuds office is located at 1205-K Girvetz Hall\nand their phone number is 805-893-3285. The Ombuds office provides\nconsultation, mediation, and facilitation, among other services, for\nfaculty, staff and students.\nUCSB Academic Counseling is a resource outside of the Bren department\nthat can help with a number of topics from academic planning to\n“balancing personal difficulties in academics.”\nGraduate counselor: Ryan Sims\nPhone: 805-893-2068\nEmail: ryan.sims@graddiv.ucsb.edu\nThis is a living document, that we are always hoping to improve. If\nyou have suggestions, questions or ideas for how we can update our Code\nof Conduct, we encourage you to reach out to us and will be grateful for\nyour feedback.\nContributions by:\nAllison Horst\nJessica Couture\n\n\n\n",
      "last_modified": "2022-08-03T09:47:57-07:00"
    },
    {
      "path": "code_probability.html",
      "title": "Find probabilities",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2022-08-03T09:47:58-07:00"
    },
    {
      "path": "code_simple_functions.html",
      "title": "Simple functions in R",
      "author": [],
      "contents": "\nWe’re going to be doing a LOT more with functions (building, testing,\ndocumenting, and more) in EDS 221, but we do meet functions in EDS 212,\nso a few starter examples are included here. More: Chapter 6 Functions in\nAdvanced R by Hadley Wickham.\nWe build functions help us to automate and repeat a process for more\nefficient, reproducible computation and programming. The basic syntax\nfor functions in R is:\n\n\nfunction_name <- function(arguments) {\n\n    body\n    \n}\n\n\n\nWhere the arguments are the different options you want the user to\ninput, that the function acts on, and the body is where you tell the\nfunction what it should do with those arguments.\nExample 1: A\nfunction with a single argument\nA model for jaguar shark mass (\\(M\\), kg) of the elusive jaguar shark is\ngiven by the following from Team Zissou, where \\(L\\) is the shark length in meters:\n\\[M=0.4L^{2.6}\\]\nWrite a function to calculate the mass of a jaguar shark, given a\nlength input.\n\n\nshark_mass <- function(shark_length) {\n  \n  0.4 * (shark_length ^ 2.6)\n  \n}\n\n\n\nThen we can use our new function to calculate the shark mass for\nsharks of whatever length we input for the shark_length\nargument. For example, let’s use the function to find the expected mass\nof a 4.1 meter long shark:\n\n\nshark_mass(shark_length = 4.1)\n\n\n[1] 15.67827\n\nExample 2: A\nfunction with multiple arguments\nKinetic energy is calculated by: \\[k_e=\\frac{1}{2}mv^2\\]\nwhere \\(k_e\\) is in [units], \\(m\\) is mass in [units], and \\(v\\) is velocity in [units].\nWrite a function to calculate the kinetic energy of an object in\nmotion if given a mass and velocity in the units above.\n\n\nke <- function(mass, velocity) {\n  \n  0.5 * mass * velocity^2\n  \n}\n\n\n\nUsing the function, find the kinetic energy of:\nA 4.9 kg object traveling at 9.8 m/s\n\n\nke(mass = 4.9, velocity = 9.8)\n\n\n[1] 235.298\n\nA 10.2 kg object traveling at 2.1 m/s\n\n\nke(mass = 10.2, velocity = 2.1)\n\n\n[1] 22.491\n\nObjects that range in size from 0 kg to 30 kg by increments of 5 kg,\neach traveling at 5 m/s?\n\n\n# Create a vector of masses: \nmass_vec <- seq(from = 0, to = 30, by = 5)\n\n# Find their energies: \nke(mass = mass_vec, velocity = 5)\n\n\n[1]   0.0  62.5 125.0 187.5 250.0 312.5 375.0\n\nPro tip: The shortcut to create a function in R is\nCommand + Option + x on a Mac, or\nControl + Option + x on a PC.\n\n\n\n",
      "last_modified": "2022-08-03T09:47:58-07:00"
    },
    {
      "path": "code_solve_ode.html",
      "title": "Solve a simple ODE",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2022-08-03T09:47:59-07:00"
    },
    {
      "path": "code_summary_statistics.html",
      "title": "Summary statistics",
      "author": [],
      "contents": "\nIn addition to exploratory data visualization, we often want to find\nbasic summary statistics. Below are several tools & functions we use\nin EDS 212 to find them.\nskimr::skim()\nThe skimr::skim() function returns “a broad overview of\na data frame. It handles data of all types, dispatching a different set\nof summary functions based on the types of columns in the data\nframe.”\n\n\nskimr::skim(penguins)\n\n\nTable 1: Data summary\nName\npenguins\nNumber of rows\n344\nNumber of columns\n8\n_______________________\n\nColumn type frequency:\n\nfactor\n3\nnumeric\n5\n________________________\n\nGroup variables\nNone\nVariable type: factor\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\nspecies\n0\n1.00\nFALSE\n3\nAde: 152, Gen: 124, Chi: 68\nisland\n0\n1.00\nFALSE\n3\nBis: 168, Dre: 124, Tor: 52\nsex\n11\n0.97\nFALSE\n2\nmal: 168, fem: 165\nVariable type: numeric\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\nbill_length_mm\n2\n0.99\n43.92\n5.46\n32.1\n39.23\n44.45\n48.5\n59.6\n▃▇▇▆▁\nbill_depth_mm\n2\n0.99\n17.15\n1.97\n13.1\n15.60\n17.30\n18.7\n21.5\n▅▅▇▇▂\nflipper_length_mm\n2\n0.99\n200.92\n14.06\n172.0\n190.00\n197.00\n213.0\n231.0\n▂▇▃▅▂\nbody_mass_g\n2\n0.99\n4201.75\n801.95\n2700.0\n3550.00\n4050.00\n4750.0\n6300.0\n▃▇▆▃▂\nyear\n0\n1.00\n2008.03\n0.82\n2007.0\n2007.00\n2008.00\n2009.0\n2009.0\n▇▁▇▁▇\n\nIt also works on grouped data:\n\n\npenguins %>% \n  dplyr::group_by(species) %>% \n  skimr::skim()\n\n\nTable 2: Data summary\nName\nPiped data\nNumber of rows\n344\nNumber of columns\n8\n_______________________\n\nColumn type frequency:\n\nfactor\n2\nnumeric\n5\n________________________\n\nGroup variables\nspecies\nVariable type: factor\nskim_variable\nspecies\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\nisland\nAdelie\n0\n1.00\nFALSE\n3\nDre: 56, Tor: 52, Bis: 44\nisland\nChinstrap\n0\n1.00\nFALSE\n1\nDre: 68, Bis: 0, Tor: 0\nisland\nGentoo\n0\n1.00\nFALSE\n1\nBis: 124, Dre: 0, Tor: 0\nsex\nAdelie\n6\n0.96\nFALSE\n2\nfem: 73, mal: 73\nsex\nChinstrap\n0\n1.00\nFALSE\n2\nfem: 34, mal: 34\nsex\nGentoo\n5\n0.96\nFALSE\n2\nmal: 61, fem: 58\nVariable type: numeric\nskim_variable\nspecies\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\nbill_length_mm\nAdelie\n1\n0.99\n38.79\n2.66\n32.1\n36.75\n38.80\n40.75\n46.0\n▁▆▇▆▁\nbill_length_mm\nChinstrap\n0\n1.00\n48.83\n3.34\n40.9\n46.35\n49.55\n51.08\n58.0\n▂▇▇▅▁\nbill_length_mm\nGentoo\n1\n0.99\n47.50\n3.08\n40.9\n45.30\n47.30\n49.55\n59.6\n▃▇▆▁▁\nbill_depth_mm\nAdelie\n1\n0.99\n18.35\n1.22\n15.5\n17.50\n18.40\n19.00\n21.5\n▂▆▇▃▁\nbill_depth_mm\nChinstrap\n0\n1.00\n18.42\n1.14\n16.4\n17.50\n18.45\n19.40\n20.8\n▅▇▇▆▂\nbill_depth_mm\nGentoo\n1\n0.99\n14.98\n0.98\n13.1\n14.20\n15.00\n15.70\n17.3\n▅▇▇▆▂\nflipper_length_mm\nAdelie\n1\n0.99\n189.95\n6.54\n172.0\n186.00\n190.00\n195.00\n210.0\n▁▆▇▅▁\nflipper_length_mm\nChinstrap\n0\n1.00\n195.82\n7.13\n178.0\n191.00\n196.00\n201.00\n212.0\n▁▅▇▅▂\nflipper_length_mm\nGentoo\n1\n0.99\n217.19\n6.48\n203.0\n212.00\n216.00\n221.00\n231.0\n▂▇▇▆▃\nbody_mass_g\nAdelie\n1\n0.99\n3700.66\n458.57\n2850.0\n3350.00\n3700.00\n4000.00\n4775.0\n▅▇▇▃▂\nbody_mass_g\nChinstrap\n0\n1.00\n3733.09\n384.34\n2700.0\n3487.50\n3700.00\n3950.00\n4800.0\n▁▅▇▃▁\nbody_mass_g\nGentoo\n1\n0.99\n5076.02\n504.12\n3950.0\n4700.00\n5000.00\n5500.00\n6300.0\n▃▇▇▇▂\nyear\nAdelie\n0\n1.00\n2008.01\n0.82\n2007.0\n2007.00\n2008.00\n2009.00\n2009.0\n▇▁▇▁▇\nyear\nChinstrap\n0\n1.00\n2007.97\n0.86\n2007.0\n2007.00\n2008.00\n2009.00\n2009.0\n▇▁▆▁▇\nyear\nGentoo\n0\n1.00\n2008.08\n0.79\n2007.0\n2007.00\n2008.00\n2009.00\n2009.0\n▆▁▇▁▇\n\nsummary()\nAs an alternative to skimr::skim(), the base\nsummary() function provides basic information about\nvariables. The type of summary information returned depends on the\nvariable class for each column.\n\n\nsummary(penguins)\n\n\n      species          island    bill_length_mm  bill_depth_mm  \n Adelie   :152   Biscoe   :168   Min.   :32.10   Min.   :13.10  \n Chinstrap: 68   Dream    :124   1st Qu.:39.23   1st Qu.:15.60  \n Gentoo   :124   Torgersen: 52   Median :44.45   Median :17.30  \n                                 Mean   :43.92   Mean   :17.15  \n                                 3rd Qu.:48.50   3rd Qu.:18.70  \n                                 Max.   :59.60   Max.   :21.50  \n                                 NA's   :2       NA's   :2      \n flipper_length_mm  body_mass_g       sex           year     \n Min.   :172.0     Min.   :2700   female:165   Min.   :2007  \n 1st Qu.:190.0     1st Qu.:3550   male  :168   1st Qu.:2007  \n Median :197.0     Median :4050   NA's  : 11   Median :2008  \n Mean   :200.9     Mean   :4202                Mean   :2008  \n 3rd Qu.:213.0     3rd Qu.:4750                3rd Qu.:2009  \n Max.   :231.0     Max.   :6300                Max.   :2009  \n NA's   :2         NA's   :2                                 \n\ndplyr::group_by() %>% dplyr::summarize()\nThe group_by() %>% summarize() combo is a powerful\none to find summary statistics or outputs within groups, based on\nfunctions you specify.\nFor example, first let’s find the mean and standard deviation of\nflipper length, grouped by penguin species (na.rm = TRUE\nomits missing values):\n\n\npenguins %>% \n  group_by(species) %>% \n  summarize(mean_flipper_length = mean(flipper_length_mm, na.rm = TRUE),\n            sd_flipper_length = sd(flipper_length_mm, na.rm = TRUE))\n\n\n# A tibble: 3 × 3\n  species   mean_flipper_length sd_flipper_length\n  <fct>                   <dbl>             <dbl>\n1 Adelie                   190.              6.54\n2 Chinstrap                196.              7.13\n3 Gentoo                   217.              6.48\n\nWe can also group by more than one variable. For example, let’s find\nthe median bill length and sample size using n(), grouped\nby penguin species and year:\n\n\npenguins %>% \n  group_by(species, year) %>% \n  summarize(median_bill_length = median(bill_length_mm, na.rm = TRUE),\n            sample_size = n())\n\n\n# A tibble: 9 × 4\n# Groups:   species [3]\n  species    year median_bill_length sample_size\n  <fct>     <int>              <dbl>       <int>\n1 Adelie     2007               38.8          50\n2 Adelie     2008               38.6          50\n3 Adelie     2009               38.7          52\n4 Chinstrap  2007               48.8          26\n5 Chinstrap  2008               49.2          18\n6 Chinstrap  2009               50.0          24\n7 Gentoo     2007               46.6          34\n8 Gentoo     2008               46.4          46\n9 Gentoo     2009               48.5          44\n\nNote: If you are only finding counts of\nobservations, you can use dplyr::count(), which bundles\ngroup_by(), summarize() and n()\ninto one nice function. A comparison is below, to find the counts of\npenguins by species and island:\n\n\n# Using group_by %>% summarize(n()):\npenguins %>% \n  group_by(species, island) %>% \n  summarize(n())\n\n\n# A tibble: 5 × 3\n# Groups:   species [3]\n  species   island    `n()`\n  <fct>     <fct>     <int>\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Dream        68\n5 Gentoo    Biscoe      124\n\n# Using count():\npenguins %>% \n  count(species, island)\n\n\n# A tibble: 5 × 3\n  species   island        n\n  <fct>     <fct>     <int>\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Dream        68\n5 Gentoo    Biscoe      124\n\n\n\n\n",
      "last_modified": "2022-08-03T09:48:01-07:00"
    },
    {
      "path": "code_viz_distributions.html",
      "title": "Basic data visualization",
      "author": [],
      "contents": "\nData visualization will become a major part of your data science\ntoolkit throughout the MEDS program. In EDS 212, we use several basic\nvisualizations to start exploring how are data are distributed:\nScatterplots (location of observations, usually for two variable\nvalues)\nHistograms (frequency of observations in defined bins)\nJitterplots (value of a variable within a category, with random\njitter)\nBoxplots (summary visualization usually showing the median,\ninterquartile range, whiskers extending to last observation within 1.5\nsteps of the IQR, and outliers beyond that)\nThe examples below use the penguins data from the\npalmerpenguins package.\nAttach packages:\n\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\n\n\nScatterplot:\nA scatterplot of bill dimensions, where each point represents the\nbill dimensions (length and depth) of a single penguin. The species is\nindicated by point shape.\n\n\nggplot(data = penguins, aes(x = bill_length_mm, bill_depth_mm)) +\n  geom_point(aes(shape = species), size = 2, alpha = 0.6) # alpha updates transparency\n\n\n\n\nHistograms\nHistograms show how values of a variable are distributed. Typically,\nhistograms show the frequency of observations (on the y-axis) within\nequally sized bins (on the x-axis).\nBelow is code to create histograms of penguin flipper lengths,\nfaceted into different panels by the groups that exist in\nspecies. Note that histograms only require a single input\nvariable (here, flipper_length_mm) - the other variable\n(frequency) is calculated automatically.\nArguments can be updated to change the bin width or number. The\nfacet_wrap() line here splits up the plots by species.\n\n\nggplot(data = penguins, aes(x = flipper_length_mm)) +\n  geom_histogram() +\n  facet_wrap(~species, ncol = 1)\n\n\n\n\nJitterplots\nA jitterplot of penguin body mass, separated by species:\n\n\nggplot(data = penguins, aes(x = species, y = body_mass_g)) +\n  geom_jitter(width = 0.2) # Default width is too large\n\n\n\n\nBoxplots\nRemember: boxplots show summary values and you should consider using\nthem in combination with another type of plot (e.g. a jitter or density\nplot).\n\n\nggplot(data = penguins, aes(x = species, y = flipper_length_mm)) +\n  geom_jitter(color = \"gray\", size = 1, width = 0.1) +\n  geom_boxplot(fill = NA, outlier.color = NA)\n\n\n\n\nQuestion: Why would I set the outlier color for the\nboxplot to NA here?\nThese examples are for quick exploratory visualization. Throughout\nMEDS you’ll learn many other ways to explore data, and how to\nmake engaging, clear and responsible final visualizations.\n\n\n\n",
      "last_modified": "2022-08-03T09:48:04-07:00"
    },
    {
      "path": "day_1.html",
      "title": "Day 1: Basic math review",
      "description": "Algebra review, unit conversions, interpreting graphs, univariate and multivariate functions, exponents, the natural exponential, and logarithms",
      "author": [],
      "contents": "\n\nDay 1 Part 1\nMorning lecture\nLecture 1A\nSlides - PDF\nAlgebra basics refresher\nUnits and unit conversions\nFunctions: structure, language, evaluation\nExponents\n\n\n\nfitvids('.shareagain', {players: 'iframe'});\n\nMorning interactive session\nInteractive\nSession 1A handout\nMeet R, RStudio, and R Markdown\nBasic math operations and functions in R\nStoring objects\nOur first function\nMorning flex Session:\nMeet git + GitHub\nDay 1 Part 2\nAfternoon lecture\nLecture 1B\nSlides - PDF\nNatural exponential (& exponential functions)\nLogarithms\nThinking about graphs\nFinding average rate of change (slope)\n\n\n\nfitvids('.shareagain', {players: 'iframe'});\n\nAfternoon interactive\nsession\nInteractive\nSession 1B handout\nR Projects\nCreating vectors and sequences\nOur first ggplot2 graph\nFunctions continued\nAfternoon flex session:\nGit & GitHub continued\nDay 1 tasks and activities\nDay 1 Tasks -\nHandout\nEfficiency tips\nInspired by Dr. Julia Lowndes’ Openscapes program.\nCmd + tab (Mac) or Ctrl + tab (PC) to\ntoggle through open applications\nCtrl + tab (both) to toggle through tabs in browser (or\nopen tabs in RStudio!)\n\n\n\n",
      "last_modified": "2022-08-03T09:48:04-07:00"
    },
    {
      "path": "day_2.html",
      "title": "Day 2: Derivatives",
      "description": "Definition of the derivative, basic rules, applications, interpretation, examples in EDS",
      "author": [],
      "contents": "\nDay 2 Part 1\nMorning lecture:\nLecture 2A\nSlides - PDF\nDefinition of the derivative\nDerivatives the long way\nBasic derivative rules\n\n\n\nfitvids('.shareagain', {players: 'iframe'});\n\nMorning interactive session\nInteractive\nSession 2A handout\nDerivatives by hand\nDerivatives in R with D()\nMeet Jupyter Notebooks\nHello Python\nMorning flex session:\ngit & GitHub continued\nDay 2 Part 2\nAfternoon lecture:\nLecture 2B Slides - PDF\nHigher order derivatives\nPartial derivatives\nApplications in environmental data science\n\n\n\nfitvids('.shareagain', {players: 'iframe'});\n\nAfternoon interactive\nsession:\nInteractive\nSession 2B handout\nDerivatives in R continued\nDrawing higher order derivatives\nPartial derivatives in R\nAfternoon flex session:\nProject oriented workflow\nReproducible pieces sans code\nDay 2 Tasks and Activities\nDay 2 Tasks - Handout\nEfficiency tips\nInspired by Dr. Julia Lowndes’ Openscapes program.\nCmd + A (Mac) or Ctrl + A: Select all in\ncurrent document\nCmd + comma (Mac): Open preferences for current\napp\n\n\n\n",
      "last_modified": "2022-08-03T09:48:05-07:00"
    },
    {
      "path": "day_3.html",
      "title": "Day 3: Differential equations, intro to linear algebra",
      "description": "Differential equations, using them, integration concepts & basics",
      "author": [],
      "contents": "\nNOTE: Wednesday 10:00am late start!\nDay 3 Part 1:\nMorning lecture:\nLecture 3A Slides - PDF\nIntro to differential equations\nDifferential equations in environmental data science\nNumerical solutions\n\n\n\nfitvids('.shareagain', {players: 'iframe'});\n\nMorning interactive session\nInteractive\nSession 3A handout\nNumerical solutions to differential equations\nApproximating solutions to the Lotke-Volterra equations in R\nDay 3 Part\n2: Basic linear algebra for data science\nLecture 3B Slides - PDF\nLanguage & shapes in linear algebra\nBasic operations\nHow this translates to data structures & working with them\n\n\n\nfitvids('.shareagain', {players: 'iframe'});\n\nAfternoon interactive\nsession\nInteractive\nSession 3B handout\nScalars, vectors, matrices, oh my!\nBasic inear algebra operations in R & Py\nVector & matrix addition and subtraction\nScalar multiplication\nDot products\nMatrix multiplication\n\nDay 3 Tasks and Activities\nDay 3 Tasks - Handout\nSee also: https://nwfsc-timeseries.github.io/atsa-labs/sec-basicmat-create.html\nEfficiency tips\nInspired by Dr. Julia Lowndes’ Openscapes program.\nCmd + C (Mac) or Ctrl + C (PC): Copy\nCmd + X (Mac) or Ctrl + X (PC): Cut\nCmd + V (Mac) or Ctrl + V (PC): Paste\nCmd + Z (Mac) or Ctrl + Z: Undo last\nCmd + Shift + Z (Mac) or Ctrl + Shift + Z\n(PC): Redo last undo\n\n\n\n",
      "last_modified": "2022-08-03T09:48:05-07:00"
    },
    {
      "path": "day_4.html",
      "title": "Day 4: Linear algebra and summary statistics",
      "description": "Interpreting, writing, solving (basic) and using differential equations in EDS. ",
      "author": [],
      "contents": "\nDay 4 Part 1:\nMorning lecture:\nLecture 4A Slides - PDF\nLinear algebra continued\nMatrix algebra\nDiagonals and transformation\nLinear algebra for systems of equations\n\n\n\nfitvids('.shareagain', {players: 'iframe'});\n\nMorning interactive session\nInteractive Session 4A handout\nBasic linear algebra continued\nSummary statistics in R and Python\nBasic visual data exploration in ggplot2\nMorning flex session\nFancy your notebooks: R Markdown tips & tricks\nDay 4 Part 2:\nAfternoon lecture:\nLecture 4B Slides - PDF\nSummary statistics and data exploration\nCentral tendency\nSpread & distributions\nExploratory data visualization\n\n\n\nfitvids('.shareagain', {players: 'iframe'});\n\nAfternoon interactive\nsession\nInteractive Session 4B handout\nSummary statistics continued\nData exploration continued\nAfternoon flex session\nWatch party: JD Long’s 2019 RStudio::conf talk\nEmpathy in action\nDay 4 Tasks and Activities\nDay 4 Tasks - Handout\nEfficiency tips\nInspired by Dr. Julia Lowndes’ Openscapes program.\nCmd + F: Open ‘Find and replace’ in current doc\nCmd + Shift + F: Search in entire R project\n\n\n\n",
      "last_modified": "2022-08-03T09:48:05-07:00"
    },
    {
      "path": "day_5.html",
      "title": "Day 5: Basic probability theory and Boolean algebra",
      "description": "Review of linear algebra basics, introduction to boolean algebra, and thinking like a computer",
      "author": [],
      "contents": "\nDay 5 Part 1:\nMorning lecture\nBasic probability theory\nFinding probabilities from theoretical distributions\nHypothesis tests - building intuition (& skepticism)\n\n\n\nfitvids('.shareagain', {players: 'iframe'});\n\nMorning interactive session\nBasic probability theory - problems\nProbabilities from the normal distribution\nMorning flex session\nStart creating your personal website in distill\nDay 5 Part 2:\nAfternoon lecture\nBoolean algebra\nNotation & language\nAsking (is.*) versus telling (as.*) in\ncode\n\n\n\nfitvids('.shareagain', {players: 'iframe'});\n\nAfternoon interactive\nsession\nLogic problems\nCommon Boolean operators in R & Python\nAfternoon flex session\nDeveloping your personal distill website -\ncontinued\nDay 5 Tasks and Activities\nDay 5 Tasks - Handout\nEfficiency tips\nInspired by Dr. Julia Lowndes’ Openscapes program.\nCmd + O: Open Finder window\nCmd + Spacebar: Open Spotlight Search\n\n\n\n",
      "last_modified": "2022-08-03T09:48:06-07:00"
    },
    {
      "path": "glossary.html",
      "title": "Glossary",
      "author": [],
      "contents": "\nA glossary of math & data science terms and abbreviations we use\nin EDS 212 (living list), in relatable language.\nA\nalgebra:\nalgorithm:\narray:\nargument:\nassignment operator:\nB\nback end:\nbinary:\nBoolean algebra/operator:\nbork:\nblameless post-mortem:\nbug:\nC\ncode:\nconcatenate:\nconfidence interval:\nconsole:\ncommand line:\ncharacter:\nD\ndashboard:\ndev:\nderivative:\ndifferential equation:\ndimensional analysis:\ndistribution:\nE\nedge case:\nenvironment:\nexponent:\nexponential:\nF\nfront end:\nfull stack:\nfunction:\nG\nH\nhack:\nheuristic:\nI\nintegrated development environment (IDE):\nintegral:\nindex:\nJ\nK\nL\nlinear algebra:\nlogarithm:\nlogical:\nM\nmarkdown:\nmatrix:\nmunging:\nN\nnatural exponential:\nnumeric solution:\nO\nordinary differential equation (ODE)\norder of operations\nP\npartial differential equation (PDE)\nPEMDAS\nprobability:\nprobability density function:\nprogramming:\nPython:\np-value:\nQ\nquery:\nR\nR:\nR Markdown:\nRStudio:\nS\nscalar:\nsnake case:\nstandard deviation:\nsoftware:\nT\ntransform:\nU\nuser interface (UI):\nV\nvector:\nvariable:\nW\nworkflow:\nwrangling:\nX\nxaringan:\nY\nZ\nzero-index:\n\n\n\n",
      "last_modified": "2022-08-03T09:48:06-07:00"
    },
    {
      "path": "index.html",
      "title": "EDS 212: Essential Math in Environmental Data Science",
      "description": "Master's of Environmental Data Science Program, UC Santa Barbara",
      "author": [],
      "contents": "\n\n\n\n\n\nIrrigated fields in the Sahara Desert, southern Egypt. Photo from\nUSGS on\nUnsplash.\n\n\nInstructor\nAllison Horst (ahorst@ucsb.edu)\n\nImportant links\nCourse\nsyllabus\nCode of Conduct\nCourse description\nQuantitative skills and understanding are critical when working with,\nunderstanding, analyzing and gleaning insights from environmental data.\nIn the intensive EDS 212 course, students will refresh fundamental\nskills in basic math (algebra, uni- and multivariate functions, units\nand unit conversions), derivative and integral calculus, differential\nequations, linear algebra, and reading, writing and evaluating logical\noperations.\nLearning objectives\nThe goal of EDS 212 (Essential Math in Environmental Data Science) is\nto prepare incoming MEDS students with quantitative methods, skills,\nnotation and language commonly used in environmental data science and\nrequired for their data science courses and projects in the program. By\nthe end of the course, students should be able to: \nPerform the following by hand and in R: convert\nunits, basic algebra and working with logs and exponentials; write,\ninterpret and evaluate univariate and multivariate functions; basic\nderivatives and integrals with univariate and multivariate functions;\nsolve simple differential equations; basic operations with scalars,\nvectors and matrices; writing and evaluating logicals\nExplain and share examples for how all topics in\nEDS 212 are useful and used in applied environmental data\nscience\nInterpret examples of applied math & models\nfrom environmental science case studies\nWork with peers to solve group tasks, then\ncommunicate the process of problem solving to the rest\nof the class\nPredictable daily schedule\nCourse dates: Monday (2021-08-01) - Friday\n(2021-08-05)\nEDS 212 is an intensive 1-week long 2-unit course. Students should\nplan to attend all scheduled sessions. All course requirements will be\ncompleted between 9am and 4:30pm PT (M - F), i.e. you are not expected\nto do additional work for EDS 212 outside of those hours, unless you are\nworking with the Teaching Assistant in student hours.\n\nNote: For EDS 212 and 221, we will start\nWednesdays at 10:00am (instead of 9:00am).\n\nTentative daily schedule (subject to change):\nTime (PST)\nActivity\n9:00am - 10:00am\nLecture 1 (60 min)\n10:00am - 11:00am\nInteractive Session 1 (60 min)\n11:00am - 12:00pm\nFlex time (60 min)\n12:00pm - 1:00pm\nLunch (60 min)\n1:00pm - 2:00pm\nLecture 2 (60 min)\n2:00pm - 3:00pm\nInteractive Session 2 (60 min)\n3:00pm - 4:30pm\nDaily tasks\nExpected sessions (subject\nto change)\nDay / session\nLecture topics\nInteractive session\nFlex sessions\nActivities\n1 (morning)\nBasic algebra\nreview, units and unit conversions, exponents, logarithms\nBy hand practice problems; Meet our R tools, basic\noperations, our first R function\nFinish installation, meet git & GitHub\n\n1 (afternoon)\nFunctions\n(interpreting & evaluating), reading graphs, slope\nBy hand practice problems; R projects, storing\nobjects, creating vectors and sequences\nnone\nDay 1 Tasks -\nHandout\n2 (morning)\nDefinition of the\nderivative\nDerivatives by hand\nand in R\ngit and GitHub continued\n\n2 (afternoon)\nHigher order &\npartial derivatives\nPartial &\nhigher order derivatives in R\nnone\nDay 2 Tasks -\nHandout\n3 (morning)\nDifferential\nequations, and solving them numerically\nInterpreting\ndifferential equations, solving numerically\nNo flex sessions Wednesday - late start\n\n3 (afternoon)\nIntroduction to\nlinear algebra basics\nMaking & basic\nalgebra with vectors and matrices\nNo flex sessions Wednesday - late start\nDay 3 Tasks -\nHandout\n4 (morning)\nLinear algebra\ncontinued\nLinear algebra\ncontinued - vectors, matrices, a Leslie matrix example\nData Science Communities - Panel\n\n4 (afternoon)\nEssential summary\nstatistics and describing data\nData exploration\nand summary statistics - getting started\nUpdate\nyour GitHub profile\nDay 4 Tasks -\nHandout\n5 (morning)\nSummary statistics continued, basic probability\ntheory\nBasic probability problems, summary statistics, R\nMarkdown customization\nStart\nbuilding your personal website\n\n5 (afternoon)\nBoolean logic and\noperators, hypothesis test primer, course\nrecap\nRelational & logical operators in R\n\n\n\nCourse requirements\nComputing\nMinimum MEDS device\nrequirements (bring to all sessions + charger!)\nR version 4.0.2 (or higher)\nRStudio version 1.4.1103 (or higher)\nQuarto\ngit\nGitHub account\nAbout this website\nThis website was created with gratitude using distill from RStudio by JJ Allaire, Rich Iannone,\nAlison Presmanes Hill, and Yihui Xie.\nThis website is one piece of the EDS 212 course materials in addition\nto lectures, computational activities, discussions, and individual and\ngroup tasks, and important materials may exist partially or not at all\non this site. While this website is public, it is not meant as a\nstandalone online course.\nOther packages used to create this website:\nrmarkdown for…pretty much everything: JJ Allaire and\nYihui Xie and Jonathan McPherson and Javier Luraschi and Kevin Ushey and\nAron Atkins and Hadley Wickham and Joe Cheng and Winston Chang and\nRichard Iannone (2021). rmarkdown: Dynamic Documents for R. R package\nversion 2.7. URL https://rmarkdown.rstudio.com.\nkableExtra for formatted tables: Hao Zhu (2020).\nkableExtra: Construct Complex Table with ‘kable’ and Pipe Syntax. R\npackage version 1.3.1. https://CRAN.R-project.org/package=kableExtra\nSlides were made in R with xaringan: Yihui Xie\n(2021). xaringan: Presentation Ninja. R package version 0.20.2. https://github.com/yihui/xaringan\n\n\n\n",
      "last_modified": "2022-08-03T09:48:07-07:00"
    }
  ],
  "collections": ["posts/posts.json"]
}
